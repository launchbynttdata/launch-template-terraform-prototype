{% include "template_" + terraform_module_type + "/_provider/" + terraform_provider + "/examples/minimal/variables.tf.jinja" ignore missing -%}

variable "resource_names_map" {
  description = "A map of key to resource_name that will be used by tf-launch-module_library-resource_name to generate resource names"
  type = map(object({
    name       = string
    max_length = optional(number, 60)
    region     = optional(string, "{{ terraform_provider_default_region[terraform_provider] }}")
  }))

  default = {
    example = {
      name       = "example"
      max_length = 80
      region     = "{{ terraform_provider_default_region[terraform_provider] }}"
    }
  }
}

variable "resource_names_strategy" {
  type        = string
  description = "Strategy to use for generating resource names, taken from the outputs of the naming module, e.g. 'standard', 'minimal_random_suffix', 'dns_compliant_standard', etc."
  nullable    = false
  default     = "minimal_random_suffix"
}

variable "logical_product_family" {
  type        = string
  description = <<EOF
    (Required) Name of the product family for which the resource is created.
    Example: org_name, department_name.
  EOF
  nullable    = false
  default     = "launch"

  validation {
    condition     = can(regex("^[A-Za-z0-9_]+$", var.logical_product_family))
    error_message = "logical_product_family may only contain letters, numbers, and underscores"
  }
}

variable "logical_product_service" {
  type        = string
  description = <<EOF
    (Required) Name of the product service for which the resource is created.
    For example, backend, frontend, middleware etc.
  EOF
  nullable    = false
  default     = "example"

  validation {
    condition     = can(regex("^[A-Za-z0-9_]+$", var.logical_product_service))
    error_message = "logical_product_service may only contain letters, numbers, and underscores"
  }
}

variable "class_env" {
  type        = string
  description = "(Required) Environment where resource is going to be deployed. For example: dev, qa, uat"
  nullable    = false
  default     = "sandbox"

  validation {
    condition     = can(regex("^[A-Za-z0-9_]+$", var.class_env))
    error_message = "class_env may only contain letters, numbers, and underscores"
  }
}

variable "instance_env" {
  type        = number
  description = "Number that represents the instance of the environment."
  nullable    = false
  default     = 0

  validation {
    condition     = var.instance_env >= 0 && var.instance_env <= 999
    error_message = "instance_env must be between 0 and 999, inclusive."
  }
}

variable "instance_resource" {
  type        = number
  description = "Number that represents the instance of the resource."
  nullable    = false
  default     = 0

  validation {
    condition     = var.instance_resource >= 0 && var.instance_resource <= 100
    error_message = "instance_resource must be between 0 and 100, inclusive."
  }
}

variable "tags" {
  description = "Map of tags to apply to this resource."
  type        = map(string)
  default     = {}
}
