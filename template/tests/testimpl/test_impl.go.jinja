{{ license_header }}
package common

{% if "hashicorp/aws" in terraform_provider -%}
import (
	"context"
	"testing"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/config"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/gruntwork-io/terratest/modules/terraform"
	"github.com/launchbynttdata/lcaf-component-terratest/types"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestResource(t *testing.T, ctx types.TestContext) {
	s3Client := GetAWSS3Client(t)
	s3BucketList, err := s3Client.ListBuckets(context.TODO(), &s3.ListBucketsInput{})
	if err != nil {
		t.Errorf("Failure during ListBuckets: %v", err)
	}

	t.Run("TestDoesBucketExist", func(t *testing.T) {
		bucket_name := terraform.Output(t, ctx.TerratestTerraformOptions(), "bucket_name")
		bucket_found := false
		for _, bucket := range s3BucketList.Buckets {
			if *bucket.Name == bucket_name {
				bucket_found = true
				break
			}
		}
		assert.True(t, bucket_found, "Bucket not found")
	})
}

func GetAWSS3Client(t *testing.T) *s3.Client {
	awsS3Client := s3.NewFromConfig(GetAWSConfig(t))
	return awsS3Client
}

func GetAWSConfig(t *testing.T) (cfg aws.Config) {
	cfg, err := config.LoadDefaultConfig(context.TODO())
	require.NoErrorf(t, err, "unable to load SDK config, %v", err)
	return cfg
}
{% elif "hashicorp/azurerm" in terraform_provider -%}
import (
	"context"
	"os"
	"strings"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	armStorage "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/storage/armstorage"
	"github.com/gruntwork-io/terratest/modules/terraform"
	"github.com/launchbynttdata/lcaf-component-terratest/types"
	"github.com/stretchr/testify/assert"
)

func TestResource(t *testing.T, ctx types.TestContext) {
	subscriptionId := os.Getenv("ARM_SUBSCRIPTION_ID")
	if len(subscriptionId) == 0 {
		t.Fatal("ARM_SUBSCRIPTION_ID environment variable is not set")
	}

	credential, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		t.Fatalf("Unable to get credentials: %e\n", err)
	}

	options := arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Cloud: cloud.AzurePublic,
		},
	}

	storageAccountClient, err := armStorage.NewAccountsClient(subscriptionId, credential, &options)
	if err != nil {
		t.Fatalf("Error getting Storage Account client: %v", err)
	}

	t.Run("doesStorageAccountExist", func(t *testing.T) {
		resourceGroupName := terraform.Output(t, ctx.TerratestTerraformOptions(), "resource_group_name")
		storageAccountName := terraform.Output(t, ctx.TerratestTerraformOptions(), "storage_account_name")

		storageAccount, err := storageAccountClient.GetProperties(context.Background(), resourceGroupName, storageAccountName, nil)
		if err != nil {
			t.Fatalf("Error getting storage account: %v", err)
		}

		assert.Equal(t, getStorageAccountName(*storageAccount.Name), strings.Trim(getStorageAccountName(storageAccountName), "]"))
	})
}

func getStorageAccountName(input string) string {
	parts := strings.Split(input, "/")
	return parts[len(parts)-1]
}
{% else %}
// TODO: Implement some tests!
{% endif %}